package com.raistone.wallet.sealwallet.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.raistone.wallet.sealwallet.factory.HdWallet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HD_WALLET".
*/
public class HdWalletDao extends AbstractDao<HdWallet, Long> {

    public static final String TABLENAME = "HD_WALLET";

    /**
     * Properties of entity HdWallet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WalletId = new Property(0, Long.class, "walletId", true, "_id");
        public final static Property WalletName = new Property(1, String.class, "walletName", false, "WALLET_NAME");
        public final static Property AccountId = new Property(2, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property WalletPwd = new Property(3, String.class, "walletPwd", false, "WALLET_PWD");
        public final static Property Mnemonic = new Property(4, String.class, "mnemonic", false, "MNEMONIC");
        public final static Property PrivateScrect = new Property(5, String.class, "privateScrect", false, "PRIVATE_SCRECT");
        public final static Property PublicScrect = new Property(6, String.class, "publicScrect", false, "PUBLIC_SCRECT");
        public final static Property IsCurrent = new Property(7, boolean.class, "isCurrent", false, "IS_CURRENT");
        public final static Property IsBackup = new Property(8, boolean.class, "isBackup", false, "IS_BACKUP");
        public final static Property IsHDWallet = new Property(9, boolean.class, "isHDWallet", false, "IS_HDWALLET");
        public final static Property IsImport = new Property(10, boolean.class, "isImport", false, "IS_IMPORT");
        public final static Property WalletType = new Property(11, int.class, "walletType", false, "WALLET_TYPE");
        public final static Property Wif = new Property(12, String.class, "wif", false, "WIF");
        public final static Property ImportType = new Property(13, int.class, "importType", false, "IMPORT_TYPE");
        public final static Property PwdTips = new Property(14, String.class, "pwdTips", false, "PWD_TIPS");
        public final static Property CnyPrice = new Property(15, String.class, "cnyPrice", false, "CNY_PRICE");
        public final static Property UsdtPrice = new Property(16, String.class, "usdtPrice", false, "USDT_PRICE");
        public final static Property Keystore = new Property(17, String.class, "keystore", false, "KEYSTORE");
    }

    private DaoSession daoSession;


    public HdWalletDao(DaoConfig config) {
        super(config);
    }
    
    public HdWalletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HD_WALLET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: walletId
                "\"WALLET_NAME\" TEXT," + // 1: walletName
                "\"ACCOUNT_ID\" TEXT," + // 2: accountId
                "\"WALLET_PWD\" TEXT," + // 3: walletPwd
                "\"MNEMONIC\" TEXT," + // 4: mnemonic
                "\"PRIVATE_SCRECT\" TEXT," + // 5: privateScrect
                "\"PUBLIC_SCRECT\" TEXT," + // 6: publicScrect
                "\"IS_CURRENT\" INTEGER NOT NULL ," + // 7: isCurrent
                "\"IS_BACKUP\" INTEGER NOT NULL ," + // 8: isBackup
                "\"IS_HDWALLET\" INTEGER NOT NULL ," + // 9: isHDWallet
                "\"IS_IMPORT\" INTEGER NOT NULL ," + // 10: isImport
                "\"WALLET_TYPE\" INTEGER NOT NULL ," + // 11: walletType
                "\"WIF\" TEXT," + // 12: wif
                "\"IMPORT_TYPE\" INTEGER NOT NULL ," + // 13: importType
                "\"PWD_TIPS\" TEXT," + // 14: pwdTips
                "\"CNY_PRICE\" TEXT," + // 15: cnyPrice
                "\"USDT_PRICE\" TEXT," + // 16: usdtPrice
                "\"KEYSTORE\" TEXT);"); // 17: keystore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HD_WALLET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HdWallet entity) {
        stmt.clearBindings();
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(1, walletId);
        }
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(2, walletName);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(3, accountId);
        }
 
        String walletPwd = entity.getWalletPwd();
        if (walletPwd != null) {
            stmt.bindString(4, walletPwd);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(5, mnemonic);
        }
 
        String privateScrect = entity.getPrivateScrect();
        if (privateScrect != null) {
            stmt.bindString(6, privateScrect);
        }
 
        String publicScrect = entity.getPublicScrect();
        if (publicScrect != null) {
            stmt.bindString(7, publicScrect);
        }
        stmt.bindLong(8, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsBackup() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsHDWallet() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsImport() ? 1L: 0L);
        stmt.bindLong(12, entity.getWalletType());
 
        String wif = entity.getWif();
        if (wif != null) {
            stmt.bindString(13, wif);
        }
        stmt.bindLong(14, entity.getImportType());
 
        String pwdTips = entity.getPwdTips();
        if (pwdTips != null) {
            stmt.bindString(15, pwdTips);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(16, cnyPrice);
        }
 
        String usdtPrice = entity.getUsdtPrice();
        if (usdtPrice != null) {
            stmt.bindString(17, usdtPrice);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(18, keystore);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HdWallet entity) {
        stmt.clearBindings();
 
        Long walletId = entity.getWalletId();
        if (walletId != null) {
            stmt.bindLong(1, walletId);
        }
 
        String walletName = entity.getWalletName();
        if (walletName != null) {
            stmt.bindString(2, walletName);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(3, accountId);
        }
 
        String walletPwd = entity.getWalletPwd();
        if (walletPwd != null) {
            stmt.bindString(4, walletPwd);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(5, mnemonic);
        }
 
        String privateScrect = entity.getPrivateScrect();
        if (privateScrect != null) {
            stmt.bindString(6, privateScrect);
        }
 
        String publicScrect = entity.getPublicScrect();
        if (publicScrect != null) {
            stmt.bindString(7, publicScrect);
        }
        stmt.bindLong(8, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsBackup() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsHDWallet() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsImport() ? 1L: 0L);
        stmt.bindLong(12, entity.getWalletType());
 
        String wif = entity.getWif();
        if (wif != null) {
            stmt.bindString(13, wif);
        }
        stmt.bindLong(14, entity.getImportType());
 
        String pwdTips = entity.getPwdTips();
        if (pwdTips != null) {
            stmt.bindString(15, pwdTips);
        }
 
        String cnyPrice = entity.getCnyPrice();
        if (cnyPrice != null) {
            stmt.bindString(16, cnyPrice);
        }
 
        String usdtPrice = entity.getUsdtPrice();
        if (usdtPrice != null) {
            stmt.bindString(17, usdtPrice);
        }
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(18, keystore);
        }
    }

    @Override
    protected final void attachEntity(HdWallet entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HdWallet readEntity(Cursor cursor, int offset) {
        HdWallet entity = new HdWallet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // walletId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // walletName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // walletPwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mnemonic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // privateScrect
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publicScrect
            cursor.getShort(offset + 7) != 0, // isCurrent
            cursor.getShort(offset + 8) != 0, // isBackup
            cursor.getShort(offset + 9) != 0, // isHDWallet
            cursor.getShort(offset + 10) != 0, // isImport
            cursor.getInt(offset + 11), // walletType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // wif
            cursor.getInt(offset + 13), // importType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pwdTips
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cnyPrice
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // usdtPrice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // keystore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HdWallet entity, int offset) {
        entity.setWalletId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWalletName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWalletPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMnemonic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrivateScrect(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublicScrect(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCurrent(cursor.getShort(offset + 7) != 0);
        entity.setIsBackup(cursor.getShort(offset + 8) != 0);
        entity.setIsHDWallet(cursor.getShort(offset + 9) != 0);
        entity.setIsImport(cursor.getShort(offset + 10) != 0);
        entity.setWalletType(cursor.getInt(offset + 11));
        entity.setWif(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setImportType(cursor.getInt(offset + 13));
        entity.setPwdTips(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCnyPrice(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUsdtPrice(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setKeystore(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HdWallet entity, long rowId) {
        entity.setWalletId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HdWallet entity) {
        if(entity != null) {
            return entity.getWalletId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HdWallet entity) {
        return entity.getWalletId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
