package com.raistone.wallet.sealwallet.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.raistone.wallet.sealwallet.factory.ChainAddressInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAIN_ADDRESS_INFO".
*/
public class ChainAddressInfoDao extends AbstractDao<ChainAddressInfo, Long> {

    public static final String TABLENAME = "CHAIN_ADDRESS_INFO";

    /**
     * Properties of entity ChainAddressInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property KeystorePath = new Property(4, String.class, "keystorePath", false, "KEYSTORE_PATH");
        public final static Property Mnemonic = new Property(5, String.class, "mnemonic", false, "MNEMONIC");
        public final static Property PrivateScrect = new Property(6, String.class, "privateScrect", false, "PRIVATE_SCRECT");
        public final static Property PublicScrect = new Property(7, String.class, "publicScrect", false, "PUBLIC_SCRECT");
        public final static Property IsCurrent = new Property(8, boolean.class, "isCurrent", false, "IS_CURRENT");
        public final static Property IsBackup = new Property(9, boolean.class, "isBackup", false, "IS_BACKUP");
        public final static Property Type_flag = new Property(10, String.class, "type_flag", false, "TYPE_FLAG");
        public final static Property IsHDWallet = new Property(11, boolean.class, "isHDWallet", false, "IS_HDWALLET");
        public final static Property IsImport = new Property(12, boolean.class, "isImport", false, "IS_IMPORT");
        public final static Property CoinType = new Property(13, String.class, "coinType", false, "COIN_TYPE");
        public final static Property ImagePath = new Property(14, int.class, "imagePath", false, "IMAGE_PATH");
        public final static Property Account = new Property(15, boolean.class, "account", false, "ACCOUNT");
        public final static Property ImportType = new Property(16, int.class, "importType", false, "IMPORT_TYPE");
        public final static Property Wif = new Property(17, String.class, "wif", false, "WIF");
        public final static Property AccountId = new Property(18, String.class, "accountId", false, "ACCOUNT_ID");
        public final static Property WalletType = new Property(19, int.class, "walletType", false, "WALLET_TYPE");
        public final static Property CnyTotalPrice = new Property(20, String.class, "cnyTotalPrice", false, "CNY_TOTAL_PRICE");
        public final static Property UsdtTotalPrice = new Property(21, String.class, "usdtTotalPrice", false, "USDT_TOTAL_PRICE");
        public final static Property SelectStatus = new Property(22, boolean.class, "selectStatus", false, "SELECT_STATUS");
        public final static Property SelectIndex = new Property(23, int.class, "selectIndex", false, "SELECT_INDEX");
        public final static Property ChainId = new Property(24, Long.class, "chainId", false, "CHAIN_ID");
    }

    private DaoSession daoSession;

    private Query<ChainAddressInfo> chainDataInfo_ChainAddressInfosQuery;

    public ChainAddressInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChainAddressInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAIN_ADDRESS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"NAME\" TEXT," + // 2: name
                "\"PASSWORD\" TEXT," + // 3: password
                "\"KEYSTORE_PATH\" TEXT," + // 4: keystorePath
                "\"MNEMONIC\" TEXT," + // 5: mnemonic
                "\"PRIVATE_SCRECT\" TEXT," + // 6: privateScrect
                "\"PUBLIC_SCRECT\" TEXT," + // 7: publicScrect
                "\"IS_CURRENT\" INTEGER NOT NULL ," + // 8: isCurrent
                "\"IS_BACKUP\" INTEGER NOT NULL ," + // 9: isBackup
                "\"TYPE_FLAG\" TEXT," + // 10: type_flag
                "\"IS_HDWALLET\" INTEGER NOT NULL ," + // 11: isHDWallet
                "\"IS_IMPORT\" INTEGER NOT NULL ," + // 12: isImport
                "\"COIN_TYPE\" TEXT," + // 13: coinType
                "\"IMAGE_PATH\" INTEGER NOT NULL ," + // 14: imagePath
                "\"ACCOUNT\" INTEGER NOT NULL ," + // 15: account
                "\"IMPORT_TYPE\" INTEGER NOT NULL ," + // 16: importType
                "\"WIF\" TEXT," + // 17: wif
                "\"ACCOUNT_ID\" TEXT," + // 18: accountId
                "\"WALLET_TYPE\" INTEGER NOT NULL ," + // 19: walletType
                "\"CNY_TOTAL_PRICE\" TEXT," + // 20: cnyTotalPrice
                "\"USDT_TOTAL_PRICE\" TEXT," + // 21: usdtTotalPrice
                "\"SELECT_STATUS\" INTEGER NOT NULL ," + // 22: selectStatus
                "\"SELECT_INDEX\" INTEGER NOT NULL ," + // 23: selectIndex
                "\"CHAIN_ID\" INTEGER);"); // 24: chainId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAIN_ADDRESS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChainAddressInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String keystorePath = entity.getKeystorePath();
        if (keystorePath != null) {
            stmt.bindString(5, keystorePath);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(6, mnemonic);
        }
 
        String privateScrect = entity.getPrivateScrect();
        if (privateScrect != null) {
            stmt.bindString(7, privateScrect);
        }
 
        String publicScrect = entity.getPublicScrect();
        if (publicScrect != null) {
            stmt.bindString(8, publicScrect);
        }
        stmt.bindLong(9, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsBackup() ? 1L: 0L);
 
        String type_flag = entity.getType_flag();
        if (type_flag != null) {
            stmt.bindString(11, type_flag);
        }
        stmt.bindLong(12, entity.getIsHDWallet() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsImport() ? 1L: 0L);
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(14, coinType);
        }
        stmt.bindLong(15, entity.getImagePath());
        stmt.bindLong(16, entity.getAccount() ? 1L: 0L);
        stmt.bindLong(17, entity.getImportType());
 
        String wif = entity.getWif();
        if (wif != null) {
            stmt.bindString(18, wif);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(19, accountId);
        }
        stmt.bindLong(20, entity.getWalletType());
 
        String cnyTotalPrice = entity.getCnyTotalPrice();
        if (cnyTotalPrice != null) {
            stmt.bindString(21, cnyTotalPrice);
        }
 
        String usdtTotalPrice = entity.getUsdtTotalPrice();
        if (usdtTotalPrice != null) {
            stmt.bindString(22, usdtTotalPrice);
        }
        stmt.bindLong(23, entity.getSelectStatus() ? 1L: 0L);
        stmt.bindLong(24, entity.getSelectIndex());
 
        Long chainId = entity.getChainId();
        if (chainId != null) {
            stmt.bindLong(25, chainId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChainAddressInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String keystorePath = entity.getKeystorePath();
        if (keystorePath != null) {
            stmt.bindString(5, keystorePath);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(6, mnemonic);
        }
 
        String privateScrect = entity.getPrivateScrect();
        if (privateScrect != null) {
            stmt.bindString(7, privateScrect);
        }
 
        String publicScrect = entity.getPublicScrect();
        if (publicScrect != null) {
            stmt.bindString(8, publicScrect);
        }
        stmt.bindLong(9, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(10, entity.getIsBackup() ? 1L: 0L);
 
        String type_flag = entity.getType_flag();
        if (type_flag != null) {
            stmt.bindString(11, type_flag);
        }
        stmt.bindLong(12, entity.getIsHDWallet() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsImport() ? 1L: 0L);
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(14, coinType);
        }
        stmt.bindLong(15, entity.getImagePath());
        stmt.bindLong(16, entity.getAccount() ? 1L: 0L);
        stmt.bindLong(17, entity.getImportType());
 
        String wif = entity.getWif();
        if (wif != null) {
            stmt.bindString(18, wif);
        }
 
        String accountId = entity.getAccountId();
        if (accountId != null) {
            stmt.bindString(19, accountId);
        }
        stmt.bindLong(20, entity.getWalletType());
 
        String cnyTotalPrice = entity.getCnyTotalPrice();
        if (cnyTotalPrice != null) {
            stmt.bindString(21, cnyTotalPrice);
        }
 
        String usdtTotalPrice = entity.getUsdtTotalPrice();
        if (usdtTotalPrice != null) {
            stmt.bindString(22, usdtTotalPrice);
        }
        stmt.bindLong(23, entity.getSelectStatus() ? 1L: 0L);
        stmt.bindLong(24, entity.getSelectIndex());
 
        Long chainId = entity.getChainId();
        if (chainId != null) {
            stmt.bindLong(25, chainId);
        }
    }

    @Override
    protected final void attachEntity(ChainAddressInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChainAddressInfo readEntity(Cursor cursor, int offset) {
        ChainAddressInfo entity = new ChainAddressInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keystorePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mnemonic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // privateScrect
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // publicScrect
            cursor.getShort(offset + 8) != 0, // isCurrent
            cursor.getShort(offset + 9) != 0, // isBackup
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // type_flag
            cursor.getShort(offset + 11) != 0, // isHDWallet
            cursor.getShort(offset + 12) != 0, // isImport
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // coinType
            cursor.getInt(offset + 14), // imagePath
            cursor.getShort(offset + 15) != 0, // account
            cursor.getInt(offset + 16), // importType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // wif
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // accountId
            cursor.getInt(offset + 19), // walletType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cnyTotalPrice
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // usdtTotalPrice
            cursor.getShort(offset + 22) != 0, // selectStatus
            cursor.getInt(offset + 23), // selectIndex
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24) // chainId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChainAddressInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeystorePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMnemonic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrivateScrect(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublicScrect(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsCurrent(cursor.getShort(offset + 8) != 0);
        entity.setIsBackup(cursor.getShort(offset + 9) != 0);
        entity.setType_flag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsHDWallet(cursor.getShort(offset + 11) != 0);
        entity.setIsImport(cursor.getShort(offset + 12) != 0);
        entity.setCoinType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImagePath(cursor.getInt(offset + 14));
        entity.setAccount(cursor.getShort(offset + 15) != 0);
        entity.setImportType(cursor.getInt(offset + 16));
        entity.setWif(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAccountId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWalletType(cursor.getInt(offset + 19));
        entity.setCnyTotalPrice(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUsdtTotalPrice(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSelectStatus(cursor.getShort(offset + 22) != 0);
        entity.setSelectIndex(cursor.getInt(offset + 23));
        entity.setChainId(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChainAddressInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChainAddressInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChainAddressInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chainAddressInfos" to-many relationship of ChainDataInfo. */
    public List<ChainAddressInfo> _queryChainDataInfo_ChainAddressInfos(Long chainId) {
        synchronized (this) {
            if (chainDataInfo_ChainAddressInfosQuery == null) {
                QueryBuilder<ChainAddressInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChainId.eq(null));
                chainDataInfo_ChainAddressInfosQuery = queryBuilder.build();
            }
        }
        Query<ChainAddressInfo> query = chainDataInfo_ChainAddressInfosQuery.forCurrentThread();
        query.setParameter(0, chainId);
        return query.list();
    }

}
