package com.raistone.wallet.sealwallet.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.raistone.wallet.sealwallet.factory.AssetsDeatilInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSETS_DEATIL_INFO".
*/
public class AssetsDeatilInfoDao extends AbstractDao<AssetsDeatilInfo, Long> {

    public static final String TABLENAME = "ASSETS_DEATIL_INFO";

    /**
     * Properties of entity AssetsDeatilInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Assets_id = new Property(0, Long.class, "assets_id", true, "_id");
        public final static Property Asset_name = new Property(1, String.class, "asset_name", false, "ASSET_NAME");
        public final static Property IsDefault = new Property(2, boolean.class, "isDefault", false, "IS_DEFAULT");
        public final static Property NotDelete = new Property(3, boolean.class, "notDelete", false, "NOT_DELETE");
        public final static Property TokenAddress = new Property(4, String.class, "tokenAddress", false, "TOKEN_ADDRESS");
        public final static Property TokenDecimal = new Property(5, String.class, "tokenDecimal", false, "TOKEN_DECIMAL");
        public final static Property TokenIcon = new Property(6, String.class, "tokenIcon", false, "TOKEN_ICON");
        public final static Property TokenName = new Property(7, String.class, "tokenName", false, "TOKEN_NAME");
        public final static Property TokenSynbol = new Property(8, String.class, "tokenSynbol", false, "TOKEN_SYNBOL");
        public final static Property CoinType = new Property(9, String.class, "coinType", false, "COIN_TYPE");
        public final static Property TokenType = new Property(10, String.class, "tokenType", false, "TOKEN_TYPE");
        public final static Property Balance = new Property(11, String.class, "balance", false, "BALANCE");
        public final static Property Price = new Property(12, String.class, "price", false, "PRICE");
        public final static Property PriceUSD = new Property(13, String.class, "priceUSD", false, "PRICE_USD");
        public final static Property Status = new Property(14, int.class, "status", false, "STATUS");
        public final static Property WalletAddress = new Property(15, String.class, "walletAddress", false, "WALLET_ADDRESS");
        public final static Property PriceFlag = new Property(16, String.class, "priceFlag", false, "PRICE_FLAG");
        public final static Property PriceUsdFlag = new Property(17, String.class, "priceUsdFlag", false, "PRICE_USD_FLAG");
        public final static Property ChainAddressId = new Property(18, Long.class, "chainAddressId", false, "CHAIN_ADDRESS_ID");
    }

    private Query<AssetsDeatilInfo> chainAddressInfo_AssetsInfoDataListQuery;

    public AssetsDeatilInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AssetsDeatilInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSETS_DEATIL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: assets_id
                "\"ASSET_NAME\" TEXT," + // 1: asset_name
                "\"IS_DEFAULT\" INTEGER NOT NULL ," + // 2: isDefault
                "\"NOT_DELETE\" INTEGER NOT NULL ," + // 3: notDelete
                "\"TOKEN_ADDRESS\" TEXT," + // 4: tokenAddress
                "\"TOKEN_DECIMAL\" TEXT," + // 5: tokenDecimal
                "\"TOKEN_ICON\" TEXT," + // 6: tokenIcon
                "\"TOKEN_NAME\" TEXT," + // 7: tokenName
                "\"TOKEN_SYNBOL\" TEXT," + // 8: tokenSynbol
                "\"COIN_TYPE\" TEXT," + // 9: coinType
                "\"TOKEN_TYPE\" TEXT," + // 10: tokenType
                "\"BALANCE\" TEXT," + // 11: balance
                "\"PRICE\" TEXT," + // 12: price
                "\"PRICE_USD\" TEXT," + // 13: priceUSD
                "\"STATUS\" INTEGER NOT NULL ," + // 14: status
                "\"WALLET_ADDRESS\" TEXT," + // 15: walletAddress
                "\"PRICE_FLAG\" TEXT," + // 16: priceFlag
                "\"PRICE_USD_FLAG\" TEXT," + // 17: priceUsdFlag
                "\"CHAIN_ADDRESS_ID\" INTEGER);"); // 18: chainAddressId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSETS_DEATIL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetsDeatilInfo entity) {
        stmt.clearBindings();
 
        Long assets_id = entity.getAssets_id();
        if (assets_id != null) {
            stmt.bindLong(1, assets_id);
        }
 
        String asset_name = entity.getAsset_name();
        if (asset_name != null) {
            stmt.bindString(2, asset_name);
        }
        stmt.bindLong(3, entity.getIsDefault() ? 1L: 0L);
        stmt.bindLong(4, entity.getNotDelete() ? 1L: 0L);
 
        String tokenAddress = entity.getTokenAddress();
        if (tokenAddress != null) {
            stmt.bindString(5, tokenAddress);
        }
 
        String tokenDecimal = entity.getTokenDecimal();
        if (tokenDecimal != null) {
            stmt.bindString(6, tokenDecimal);
        }
 
        String tokenIcon = entity.getTokenIcon();
        if (tokenIcon != null) {
            stmt.bindString(7, tokenIcon);
        }
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(8, tokenName);
        }
 
        String tokenSynbol = entity.getTokenSynbol();
        if (tokenSynbol != null) {
            stmt.bindString(9, tokenSynbol);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(10, coinType);
        }
 
        String tokenType = entity.getTokenType();
        if (tokenType != null) {
            stmt.bindString(11, tokenType);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(12, balance);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(13, price);
        }
 
        String priceUSD = entity.getPriceUSD();
        if (priceUSD != null) {
            stmt.bindString(14, priceUSD);
        }
        stmt.bindLong(15, entity.getStatus());
 
        String walletAddress = entity.getWalletAddress();
        if (walletAddress != null) {
            stmt.bindString(16, walletAddress);
        }
 
        String priceFlag = entity.getPriceFlag();
        if (priceFlag != null) {
            stmt.bindString(17, priceFlag);
        }
 
        String priceUsdFlag = entity.getPriceUsdFlag();
        if (priceUsdFlag != null) {
            stmt.bindString(18, priceUsdFlag);
        }
 
        Long chainAddressId = entity.getChainAddressId();
        if (chainAddressId != null) {
            stmt.bindLong(19, chainAddressId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetsDeatilInfo entity) {
        stmt.clearBindings();
 
        Long assets_id = entity.getAssets_id();
        if (assets_id != null) {
            stmt.bindLong(1, assets_id);
        }
 
        String asset_name = entity.getAsset_name();
        if (asset_name != null) {
            stmt.bindString(2, asset_name);
        }
        stmt.bindLong(3, entity.getIsDefault() ? 1L: 0L);
        stmt.bindLong(4, entity.getNotDelete() ? 1L: 0L);
 
        String tokenAddress = entity.getTokenAddress();
        if (tokenAddress != null) {
            stmt.bindString(5, tokenAddress);
        }
 
        String tokenDecimal = entity.getTokenDecimal();
        if (tokenDecimal != null) {
            stmt.bindString(6, tokenDecimal);
        }
 
        String tokenIcon = entity.getTokenIcon();
        if (tokenIcon != null) {
            stmt.bindString(7, tokenIcon);
        }
 
        String tokenName = entity.getTokenName();
        if (tokenName != null) {
            stmt.bindString(8, tokenName);
        }
 
        String tokenSynbol = entity.getTokenSynbol();
        if (tokenSynbol != null) {
            stmt.bindString(9, tokenSynbol);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(10, coinType);
        }
 
        String tokenType = entity.getTokenType();
        if (tokenType != null) {
            stmt.bindString(11, tokenType);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(12, balance);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(13, price);
        }
 
        String priceUSD = entity.getPriceUSD();
        if (priceUSD != null) {
            stmt.bindString(14, priceUSD);
        }
        stmt.bindLong(15, entity.getStatus());
 
        String walletAddress = entity.getWalletAddress();
        if (walletAddress != null) {
            stmt.bindString(16, walletAddress);
        }
 
        String priceFlag = entity.getPriceFlag();
        if (priceFlag != null) {
            stmt.bindString(17, priceFlag);
        }
 
        String priceUsdFlag = entity.getPriceUsdFlag();
        if (priceUsdFlag != null) {
            stmt.bindString(18, priceUsdFlag);
        }
 
        Long chainAddressId = entity.getChainAddressId();
        if (chainAddressId != null) {
            stmt.bindLong(19, chainAddressId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetsDeatilInfo readEntity(Cursor cursor, int offset) {
        AssetsDeatilInfo entity = new AssetsDeatilInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // assets_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // asset_name
            cursor.getShort(offset + 2) != 0, // isDefault
            cursor.getShort(offset + 3) != 0, // notDelete
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tokenAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tokenDecimal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tokenIcon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tokenName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tokenSynbol
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // coinType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tokenType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // balance
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // price
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // priceUSD
            cursor.getInt(offset + 14), // status
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // walletAddress
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // priceFlag
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // priceUsdFlag
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18) // chainAddressId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetsDeatilInfo entity, int offset) {
        entity.setAssets_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAsset_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsDefault(cursor.getShort(offset + 2) != 0);
        entity.setNotDelete(cursor.getShort(offset + 3) != 0);
        entity.setTokenAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTokenDecimal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTokenIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTokenName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTokenSynbol(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCoinType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTokenType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBalance(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPriceUSD(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatus(cursor.getInt(offset + 14));
        entity.setWalletAddress(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPriceFlag(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPriceUsdFlag(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setChainAddressId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetsDeatilInfo entity, long rowId) {
        entity.setAssets_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetsDeatilInfo entity) {
        if(entity != null) {
            return entity.getAssets_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetsDeatilInfo entity) {
        return entity.getAssets_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "assetsInfoDataList" to-many relationship of ChainAddressInfo. */
    public List<AssetsDeatilInfo> _queryChainAddressInfo_AssetsInfoDataList(Long chainAddressId) {
        synchronized (this) {
            if (chainAddressInfo_AssetsInfoDataListQuery == null) {
                QueryBuilder<AssetsDeatilInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChainAddressId.eq(null));
                chainAddressInfo_AssetsInfoDataListQuery = queryBuilder.build();
            }
        }
        Query<AssetsDeatilInfo> query = chainAddressInfo_AssetsInfoDataListQuery.forCurrentThread();
        query.setParameter(0, chainAddressId);
        return query.list();
    }

}
